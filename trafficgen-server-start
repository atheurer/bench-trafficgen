#!/bin/bash
exec >trafficgen-server-start-stderrout.txt 
exec 2>&1

. /usr/bin/trafficgen-base || (echo "/usr/bin/trafficgen-base not found"; exit 1)

dump_runtime
validate_label

# Defaults
devices=""
testpmd_forward_mode="mac"

# Options processing
re='^(--[^=]+)=([^=]+)'
while [ $# -gt 0 ]; do
    if [[ "$1" =~ $re ]]; then
        arg="${BASH_REMATCH[1]}"
        val="${BASH_REMATCH[2]}"
        shift
    else
        arg="$1"
        shift
        val="$1"
        shift
    fi
    case "$arg" in
        # The following two are needed to determine DPDK device IDs (0,1,2...)
        --server-devices)
            devices="$val"
            ;;
        --testpmd-forward-mode)
            testpmd_forward_mode="$val"
            ;;
        # Skip options not intended for binary-search
        --client-devices|--active-client-devices|--client-cpus)
            ;;
    esac
done

if [ -z "$devices" ]; then
    echo "Value for --server-devices was not found, exiting"
    exit 1
fi

# If --server-devices is "none", then this indicates that the client
# is not testing a device-under-test, but is confgiured to be in 
# loopback: the traffic-generators' interfaces are connected directly
# to itself.  This is used for sanity checks.
if [ "$devices" == "none" ]; then
    echo "Will not start testpmd because this is a traffic-generator loopback test"
    exit 0
fi

# trafficgen-server may receive a message about MACs from the traffic-generator
echo "These files exist in ./msgs/rx:"
/bin/ls -l msgs/rx
file="msgs/rx/infra-start:1"
if [ -e "$file" ]; then
    echo "Found $file:"
    cat $file
    peermac0=`jq -r '.macs[0]' $file`
    if [ ! -z "$peermac0" ]; then
        echo "Found eth-peer MAC0 $peermac0"
    fi
    peermac1=`jq -r '.macs[1]' $file`
    if [ ! -z "$peermac1" ]; then
        echo "Found eth-peer MAC1 $peermac1"
    fi
fi

# Build testpmd cmdline opts for device selection
echo "Resolving devices for testpmd based on devices [$devices]"
testpmd_dev_opt=""
for dev in `echo $devices | sed -e 's/,/ /g'`; do
    res_dev=""
    resolve_device res_dev $dev
    testpmd_dev_opt+=" -w $res_dev"
done
if [ -z "$testpmd_dev_opt" ]; then
    "Testpmd devices could not be found, exiting"
    exit 1
fi

testpmd_output="trafficgen-testpmd-stderrout.txt"
testpmd_bin=/usr/bin/testpmd
testpmd_opts="--huge-dir /dev/hugepages $testpmd_dev_opt"
testpmd_opts+=" -- --nb-cores 2 -a --stats-period=5"
# TODO: Auto CPU allocation for all endpoints/osruntimes
#       (put in trafficgen-base and use for client as well)
if [ "$testpmd_forward_mode" == "mac" ]; then
    testpmd_opts+=" --eth-peer 0,$peermac0 --eth-peer 1,$peermac1 --forward-mode mac"
else
    testpmd_opts+=" "
fi
# TODO: Support other testpmd options

echo "Going to run: $testpmd_bin $testpmd_opts"
$testpmd_bin $testpmd_opts 2>&1 >$testpmd_output &
echo $! >> trafficgen-server.pid
sleep 5 # TODO: need a better wait
mac0=`grep "Port 0:" $testpmd_output | awk -F"0: " '{print $2}'`
mac1=`grep "Port 1:" $testpmd_output | awk -F"1: " '{print $2}'`
echo "MAC0: $mac0"
echo "MAC1: $mac1"
# TODO: fail is MACs are not found in testpmd output
if [ "$testpmd_forward_mode" == "mac" ]; then
    # MAC info, to be sent to endpoint and then forwarded to the client
    echo '{"recipient":{"type":"all","id":"all"},"user-object":{"macs":["'$mac0'","'$mac1'"]}}' >msgs/tx/svc
fi
